/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var NodeZendesk = require('node-zendesk');
var util = require('util');

var log = require('oae-logger').logger('oae-tickets-zendesk');
var ConfigAPI = require('oae-config');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PublicationsAPI = require('oae-publications');
var TicketsConstants = require('oae-tickets/lib/constants').TicketsConstants;
var TicketsEmitter = require('oae-tickets/lib/internal/emitter');
var Validator = require('oae-util/lib/validator').Validator;

var ZenDeskConfig = ConfigAPI.config('oae-tickets-zendesk');
var ZenDeskTemplates = require('oae-tickets-zendesk/lib/templates');

/**
 * When the TicketsEmitter dispatches a 'CREATED_TICKET' event, a new ZenDesk ticket needs to be created.
 */
TicketsEmitter.on(TicketsConstants.events.CREATED_TICKET, function(ctx, ticket) {
    createZenDeskTicket(ctx, ctx.user(), ctx.tenant(), ticket);
});

/**
 * Create a ticket on a tenant's Zendesk instance from an OAE ticket.
 *
 * The ticket is sent to the zendesk instance configured in the tenant implied by the passed context.
 * The ticket's reporter is the user who created the OAE ticket.
 * A zendesk user is created using the user's email if a user with the email does not already exist in Zendesk.
 *
 *  * We are using 'node-zendesk' to handle all the communication between Avocet and ZenDesk.
 *  * More information can be found at https://github.com/blakmatrix/node-zendesk.
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current tenant
 * @param  {User}       user                        Object representing the user that created the ticket
 * @param  {Tenant}     tenant                      Object representing the tenant the ticket was created in
 * @param  {Ticket}     ticket                      The ticket to forward to ZenDesk
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                Error object containg the error code and the error message
 * @param  {Object}     callback.zenDeskTicket      The ticket created on ZenDesk
 */
var createZenDeskTicket = module.exports.createZenDeskTicket = function(ctx, user, tenant, ticket, callback) {
    callback = callback || function(){};

    // Validate the tenant and ticket parameters
    var validator = new Validator();
    validator.check(null, {'code': 400, 'msg': 'Missing or invalid tenant specified'}).isObject(tenant);
    validator.check(null, {'code': 400, 'msg': 'Missing or invalid ticket specified'}).isObject(ticket);
    if (ticket) {
        validator.check(ticket.externalId, {'code': 400, 'msg': 'Invalid ticket specified'}).notEmpty();
    }
    if (validator.hasErrors()) {
        log().error({'err': validator.getFirstError()});
        return callback(validator.getFirstError());
    }

    // Check if the ZenDesk integration is enabled for the tenant
    var tenantAlias = tenant.alias;
    if (!ZenDeskConfig.getValue(tenantAlias, 'general', 'forwardToZendesk')) {
        log().error({'code': 401, 'msg': 'ZenDesk integration not enabled for tenant'});
        return callback({'code': 401, 'msg': 'ZenDesk integration not enabled for tenant'});
    }

    // Retrieve and validate the ZenDesk configurations
    var email = ZenDeskConfig.getValue(tenantAlias, 'general', 'zenDeskUserEmail');
    var token = ZenDeskConfig.getValue(tenantAlias, 'general', 'zenDeskApiToken');
    var uri = ZenDeskConfig.getValue(tenantAlias, 'general', 'zenDeskUri');

    validator.check(email, {'code': 400, 'msg': 'Missing ZenDesk client username'}).notEmpty();
    validator.check(token, {'code': 400, 'msg': 'Missing ZenDesk client token'}).notEmpty();
    validator.check(uri, {'code': 400, 'msg': 'Missing ZenDesk client URI'}).notEmpty();
    if (validator.hasErrors()) {
        log().error({'err': validator.getFirstError()}, 'Error while creating ZenDesk client');
        return callback(validator.getFirstError());
    }

    // Retrieve and validate the ZenDesk client
    var client = _getZenDeskClient(email, token, uri);
    validator.check(null, {'code': 400, 'msg': 'Missing ZenDesk client'}).isObject(client);

    // Retrieve and validate the group ID
    var groupID = ZenDeskConfig.getValue(tenantAlias, 'general', 'zenDeskGroupID');
    validator.check(groupID, {'code': 400, 'msg': 'Missing ZenDesk group ID'}).notEmpty();

    // Return the first error, if any errors occurred
    if (validator.hasErrors()) {
        log().error({'err': validator.getFirstError()}, 'Error while creating ZenDesk ticket');
        return callback(validator.getFirstError());
    }

    // Retrieve the user profile
    PrincipalsDAO.getPrincipal(ticket.createdBy, function(err, user) {
        if (err) {
            log().error({'err': err, 'ticket': ticket}, 'Error fetching the ticket\'s creator');
            return callback(err);
        }

        // Retrieve the created publication
        PublicationsAPI.getPublication(ctx, ticket.publicationId, function(err, publication) {
            if (err) {
                log().error({'err': err, 'ticket': ticket}, 'Error fetching the ticket\'s publication');
                return callback(err);
            }

            // Contact the submitter at the address provided in the form, or their account email if no address was provided.
            var userEmail = publication.contactEmail || user.email;

            // Retrieve the ZenDesk user
            _getOrCreateZendeskUser(client, user.displayName, userEmail, function(err, zenDeskUser) {
                if (err) {
                    log().error({'err': err, 'user': user}, 'Error creating ZenDesk user');
                    return callback(err);
                }

                // Produce a date string for the acceptance date if one is available
                var acceptanceDate = null;
                if (_.isNumber(publication.acceptanceDate)) {
                    acceptanceDate = _formatAcceptanceDate(publication.acceptanceDate);
                }

                // Construct the download URL for the attached content (if it exists)
                var downloadURL = null;
                if (publication.linkedContent && publication.linkedContent.downloadPath) {
                    downloadURL = util.format('https://%s%s', tenant.host, publication.linkedContent.downloadPath);
                }

                // Create an object that will be passed in when creating the ZenDesk ticket
                var zenDeskTicket = {
                    'ticket': {
                        'group_id': groupID,
                        'requester_id': zenDeskUser.id,
                        'external_id': ticket.externalId,
                        'subject': util.format('Open Access enquiry %s', ticket.externalId),
                        'description': ZenDeskTemplates.zendeskTicketBodyTemplate({
                            'user': user,
                            'tenant': tenant,
                            'publication': publication,
                            'email': userEmail,
                            'funders': _formatFunders(publication.funders),
                            'otherFunders': _getOtherFunders(publication.funders),
                            'ticket': ticket,
                            'groupID': groupID,
                            'acceptanceDate': acceptanceDate,
                            'downloadURL': downloadURL
                        })
                    }
                };

                // Create a new ZenDesk ticket
                client.tickets.create(zenDeskTicket, function(err, req, result) {
                    if (err) {
                        log().error({'err': err, 'zenDeskTicket': zenDeskTicket}, 'Error creating ticket on zendesk.com');
                        return callback({'code': 500, 'msg': 'Error creating a ZenDesk ticket'});
                    }
                    return callback(null, result);
                });
            });
        });
    });
};

/**
 * Format a millisecond timestamp as dd/mm/yyyy for use in the zendesk ticket description.
 *
 * @param   {Number}    dateMillis      The timestamp to format
 * @return  {String}                    A string representing the timestamp's value
 * @api private
 */
var _formatAcceptanceDate = function(dateMillis) {
    var date = new Date();
    date.setTime(dateMillis);

    return util.format("%d/%d/%d", date.getDate(), date.getMonth() + 1, date.getFullYear());
};

/**
 * Strip the 'other:' prefix from an "Other Funder" funder string.
 *
 * @param   {String}    funder      A funder string
 * @return  {String|undefined}      The portion of the string after other:, or undefined if the string didn't start with other: or the string following other: was empty
 * @api private
 */
var _stripOtherFunderPrefix = function(funder) {
    if (funder.substr(0, 6) === 'other:' && funder.length > 6) {
        return funder.substr(6);
    }
    return undefined;
};

/**
 * Get the values of the 'other:' funders in a list of funders, joined with commas.
 *
 * @param   {String[]}  funders     An array of funder strings
 * @return  {String|undefined}      The value of any 'Other' funders in the array
 * @api private
 */
var _getOtherFunders = function(funders) {
    return _.chain(funders).map(_stripOtherFunderPrefix).compact().value().join(", ") || undefined;
};

/**
 * Format a funder array for use in the zendesk ticket description.
 *
 * @param   {String[]}  funders     An array of funder strings
 * @return  {String}                A string representing the funder list
 * @api private
 */
var _formatFunders = function(funders) {
    return _.reject(funders, _stripOtherFunderPrefix).join(', ');
};

/**
 * Get the ZenDesk user for the specified email address, creating it if it doesn't already exist.
 * The name is not used to find users, but will be used when creating a user is necessary.
 *
 * @param  {Object}     client              A node-zendesk API client object
 * @param  {String}     name                The full name of the user
 * @param  {String}     email               The user's email
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Standard error object
 * @param  {Object}     callback.user       A Zendesk user object (no {'user': {...}} wrapper)
 * @api private
 */
var _getOrCreateZendeskUser = function(client, name, email, callback) {
    var validator = new Validator();
    validator.check(name, {'code': 400, 'msg': 'No name specified'}).notEmpty();
    validator.check(name, {'code': 400, 'msg': 'Invalid name specified'}).isShortString();
    validator.check(email, {'code': 400, 'msg': 'No email address specified'}).notEmpty();
    validator.check(email, {'code': 400, 'msg': 'Invalid email address specified'}).isEmail();
    if (validator.hasErrors()) {
        log().error({'err': validator.getFirstError()}, 'Error while creating new ZenDesk user');
        return callback(validator.getFirstError());
    }

    // If the querystring is an email, ZenDesk seems to only match users with the exact matching email address.
    client.users.search({'query': email}, function(err, status, data) {
        if (err) {
            log().error({'err': err, 'email': email}, 'Error while searching for ZenDesk user');
            return callback({'code': 500, 'err': 'Error while searching for ZenDesk user'});
        }

        // No need to create a user as one already exists
        if (!_.isEmpty(data)) {
            return callback(null, data[0]);
        }

        // Create user
        client.users.create({'user': {'name': name, 'email': email}}, function(err, status, data) {
            if (err) {
                log().error({'err': err, 'name': name, 'email': email}, 'Error while creating ZenDesk user');
                return callback({'code': 500, 'msg': 'Error while creating ZenDesk user'});
            }

            if (status !== 201) {
                log().error({'status': status, 'data': data}, 'Unexpected response from ZenDesk API, expected 201 created');
                return callback({'code': 500, 'msg': 'Unexpected response from ZenDesk API, expected 201 created'});
            }

            return callback(null, data);
        });
    });
};

/**
 * Create and return the ZenDesk client
 *
 * @param  {String}     email           The user's email
 * @param  {String}     token           The ZenDesk token
 * @param  {String}     uri             The ZenDesk uri
 * @return {Client}                     The ZenDesk client
 * @api private
 */
var _getZenDeskClient = function(email, token, uri) {
    return NodeZendesk.createClient({
        'username': email,
        'token': token,
        'remoteUri': uri
    });
};
