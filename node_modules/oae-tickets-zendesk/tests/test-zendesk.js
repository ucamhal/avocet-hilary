/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ConfigAPI = require('oae-config');
var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var PublicationsRestAPI = require('oae-publications/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var User = require('oae-principals/lib/model').User;

var TicketsZenDeskAPI = require('../lib/api');
var TicketsZenDeskConfig = ConfigAPI.config('oae-tickets-zendesk');

describe('Tickets - ZenDesk', function() {

    // Tenant object that can be used every time we need tenant specific data
    var camTenant = null;

    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;

    // User object that can be used every time we need user specific data
    var coenegoUser = null;
    var halUser = null;

    // Generic context for API methods
    var camUserCtx = null;

    var app = null;
    var server = null;
    var port = null;

    describe('Creating tickets', function() {

        var ticketsCreated = 0;

        /**
         * Initializes the admin/user REST contexts
         */
        before(function(callback) {

            // Create a first tenant
            tenantAlias = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, ctx) {
                assert.ok(!err);
                camTenant = tenant;
                camAdminRestContext = ctx;

                // Fill up the coenego and hal user rest context
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, _coenegoUser, _halUser) {
                    assert.ok(!err);
                    coenegoUser = _coenegoUser;
                    halUser = _halUser;

                    // Set an email address for the Coenego and the Hal user
                    RestAPI.User.updateUser(_coenegoUser.restContext, _coenegoUser.user.id, {'email': 'coenego@mail.com'}, function(err, _coenegoUser) {
                        assert.ok(!err);
                        coenegoUser.user = _coenegoUser;

                        // Create a generic context for the coenegoUser to use with api methods
                        var camUser = new User(camTenant.alias, coenegoUser.user.id, coenegoUser.user.displayName);
                        camUserCtx = new Context(camTenant, camUser);

                        RestAPI.User.updateUser(_halUser.restContext, _halUser.user.id, {'email': 'hal@mail.bla'}, function(err, _halUser) {
                            assert.ok(!err);
                            halUser.user = _halUser;

                            // Create a new Express application to mock a ZenDesk instance
                            TestsUtil.createTestServer(function(_app, _server, _port) {
                                app = _app;
                                server = _server;
                                port = _port;

                                // Update the ZenDesk uri
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Restores the ZenDesk configurations before each test
         */
        beforeEach(function(callback) {

            var config = {
                'oae-tickets-zendesk/general/forwardToZendesk': false,
                'oae-tickets-zendesk/general/zenDeskGroupID': '123456',
                'oae-tickets-zendesk/general/zenDeskUserEmail': 'mail@mail.com',
                'oae-tickets-zendesk/general/zenDeskApiToken': 'some_token',
                'oae-tickets-zendesk/general/zenDeskUri': util.format('http://localhost:%s/api/v2', port)
            };

            // Update the ZenDesk configurations
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, config, function(err) {
                assert.ok(!err);
                return callback();
            });
        });

        /**
         * Close the ZenDesk mock connection
         */
        after(function(callback) {
            return server.close(callback);
        });

        /**
         * Test that verifies that no ZenDesk tickets are created when the ZenDesk integration is disabled for the tenant
         */
        it('verify that no ZenDesk tickets are created when disabled for tenant', function(callback) {

            // Verify that creating a ticket when the integration is disabled results in an error
            TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {'ticketId': 't:camtest:d2c7fb55lK', 'externalId': 'OA-1'}, function(err, ticket) {
                assert.strictEqual(err.code, 401);
                return callback();
            });
        });

        /**
         * Test that verifies that valid parameters were passed in
         */
        it('verify parameters', function(callback) {

            // Enable the ZenDesk integration for the tenant
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/forwardToZendesk': true}, function(err) {
                assert.ok(!err);

                // Verify that creating a ZenDesk ticket with a missing tenant throws an error
                TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, null, {}, function(err, ticket) {
                    assert.equal(err.code, 400);

                    // Verify that creating a ZenDesk ticket with a missing ticket throws an error
                    TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, null, function(err, ticket) {
                        assert.equal(err.code, 400);

                        // Verify that creating a ZenDesk ticket with an invalid ticket throws an error
                        TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, 'invalid_entry', function(err, ticket) {
                            assert.equal(err.code, 400);

                            // Verify that creating a ZenDesk ticket with an invalid ticket throws an error
                            TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, [], function(err, ticket) {
                                assert.equal(err.code, 400);

                                // Verify that creating a ZenDesk ticket with an invalid ticket throws an error
                                TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {}, function(err, ticket) {
                                    assert.equal(err.code, 400);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that valid configuration settings have been entered
         */
        it('verify ZenDesk configuration', function(callback) {

            // Collection of configuration values that need te be cleared
            var configFields = [
                'oae-tickets-zendesk/general/zenDeskGroupID',
                'oae-tickets-zendesk/general/zenDeskUserEmail',
                'oae-tickets-zendesk/general/zenDeskApiToken',
                'oae-tickets-zendesk/general/zenDeskUri'
            ];

            // Clear the configuration values
            ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, configFields, function(err) {
                assert.ok(!err);

                // Enable the ZenDesk integration for the tenant
                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/forwardToZendesk': true}, function(err) {
                    assert.ok(!err);

                    // Verify that creating a ticket with a missing or invalid client username throws an error
                    TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {'ticketId': 't:camtest:d2c7fb55lK', 'externalId': 'OA-1'}, function(err, ticket) {
                        assert.equal(err.code, 400);
                        assert.strictEqual(err.msg, 'Missing ZenDesk client username');

                        // Set the ZenDesk user email
                        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/zenDeskUserEmail': 'mail@mail.com'}, function(err) {
                            assert.ok(!err);

                            // Verify that creating a ticket with a missing token throws an error
                            TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {'ticketId': 't:camtest:d2c7fb55lK', 'externalId': 'OA-1'}, function(err, ticket) {
                                assert.equal(err.code, 400);
                                assert.strictEqual(err.msg, 'Missing ZenDesk client token');

                                // Set the ZenDesk user email
                                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/zenDeskApiToken': 'some_token'}, function(err) {
                                    assert.ok(!err);

                                    // Verify that creating a ticket with a missing URI throws an error
                                    TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {'ticketId': 't:camtest:d2c7fb55lK', 'externalId': 'OA-1'}, function(err, ticket) {
                                        assert.equal(err.code, 400);
                                        assert.strictEqual(err.msg, 'Missing ZenDesk client URI');

                                        // Set the ZenDesk URI
                                        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/zenDeskUri': util.format('http://localhost:%s/api/v2', port)}, function(err) {
                                            assert.ok(!err);

                                            // Verify that creating a ticket with a missing group ID throws an error
                                            TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, {'ticketId': 't:camtest:d2c7fb55lK', 'externalId': 'OA-1'}, function(err, ticket) {
                                                assert.equal(err.code, 400);
                                                assert.strictEqual(err.msg, 'Missing ZenDesk group ID');
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that creating a ticket generates a ZenDesk ticket
         */
        it('verify that creating a ticket generates a ZenDesk ticket', function(callback) {

            // Mock endpoint that returns a user
            app.get('/api/v2/users/search.json', function(req, res) {
                var data = {
                    'users': [{
                        'id': 479860142,
                        'url': util.format('%s/users/479860142.json', TicketsZenDeskConfig.getValue(camTenant.alias, 'general', 'zenDeskUri')),
                        'name': coenegoUser.user.displayName,
                        'email': coenegoUser.user.email,
                        'created_at': '2014-04-14T10:00:46Z',
                        'updated_at': '2014-04-14T10:00:46Z'
                    }],
                    'next_page': null,
                    'previous_page': null,
                    'count': 1
                };
                res.send(200, JSON.stringify(data));
            });

            // Mock endpoint that returns a ticket
            app.post('/api/v2/tickets.json', function(req, res) {
                ticketsCreated++;
                var data = {
                    'ticket': {
                        'url': util.format('%s/tickets/%s.json', TicketsZenDeskConfig.getValue(camTenant.alias, 'general', 'zenDeskUri'), ticketsCreated),
                        'id': ticketsCreated,
                        'external_id': req.body.ticket.external_id,
                        'created_at': '2014-04-14T17:13:05Z',
                        'updated_at': '2014-04-14T17:13:05Z',
                        'type': null,
                        'subject': req.body.ticket.subject,
                        'description': req.body.ticket.description,
                        'status': 'open',
                        'requester_id': req.body.ticket.requester_id,
                        'submitter_id': 479860142,
                        'assignee_id': 477098892,
                        'group_id': req.body.ticket.group_id
                    }
                };
                res.send(201, JSON.stringify(data));
            });

            // Create a new publication before we enable the ZenDesk integration
            PublicationsRestAPI.createPublication(coenegoUser.restContext, ['foobar#' + Date.now()], 'A displayName', 'other', 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                var createdPublication = data.publication;

                // Enable ZenDesk integration for tenant
                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets-zendesk/general/forwardToZendesk': true}, function(err) {
                    assert.ok(!err);

                    TicketsZenDeskAPI.createZenDeskTicket(camUserCtx, coenegoUser, camTenant, data.publication.ticket, function(err, ticket) {
                        assert.ok(!err);
                        assert.strictEqual(ticketsCreated, 1);
                        assert.strictEqual(ticket.id, ticketsCreated);
                        assert.strictEqual(ticket.external_id, createdPublication.ticket.externalId);
                        assert.strictEqual(ticket.created_at, '2014-04-14T17:13:05Z');
                        assert.strictEqual(ticket.updated_at, '2014-04-14T17:13:05Z');
                        assert.strictEqual(ticket.subject, util.format('Open Access enquiry %s', createdPublication.ticket.externalId));
                        assert.strictEqual(ticket.status, 'open');
                        assert.strictEqual(ticket.requester_id, 479860142);
                        assert.strictEqual(ticket.submitter_id, 479860142);
                        assert.strictEqual(ticket.assignee_id, 477098892);
                        assert.strictEqual(ticket.group_id, '123456');
                        return callback();
                    });
                });
            });
        });
    });
});
